//
//  PackStreamValueTests.swift
//
//
//  Created by Giacomo Leopizzi on 03/07/24.
//

import Testing
import NIOCore
@testable import PackStream

@Suite
struct PackStreamValueTests {
    
    static var arguments: [(PackStreamValue, [Byte])] = [
        (.null, [0xC0]),
        (.boolean(false), [0xC2]),
        (.boolean(true), [0xC3]),
        (.integer(42), [0x2A]),
        (.integer(-9223372036854775808), [0xCB, 0x80, 0, 0, 0, 0, 0, 0, 0]),
        (.integer(9223372036854775807), [0xCB, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]),
        (.float(1.23), [0xC1, 0x3F, 0xF3, 0xAE, 0x14, 0x7A, 0xE1, 0x47, 0xAE]),
        (.bytes(ByteBuffer()), [0xCC, 0x00]),
        (.bytes(ByteBuffer([1, 2, 3])), [0xCC, 0x03, 0x01, 0x02, 0x03]),
        (.string(""), [0x80]),
        (.string("A"), [0x81, 0x41]),
        (.string("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), [0xD0, 0x1A, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A]),
        (.string("Größenmaßstäbe"), [0xD0, 0x12, 0x47, 0x72, 0xC3, 0xB6, 0xC3, 0x9F, 0x65, 0x6E, 0x6D, 0x61, 0xC3, 0x9F, 0x73, 0x74, 0xC3, 0xA4, 0x62, 0x65]),
        (.list([]), [0x90]),
        (.list([1, 2, 3]), [0x93, 0x01, 0x02, 0x03]),
        (.list([1, 2.0, "three"]), [0x93, 0x01, 0xC1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x74, 0x68, 0x72, 0x65, 0x65]),
        (.list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,  26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]), [0xD4, 0x28, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28]),
        (.dictionary([:]), [0xA0]),
        (.dictionary(["one" : "eins"]), [0xA1, 0x83, 0x6F, 0x6E, 0x65, 0x84, 0x65, 0x69, 0x6E, 0x73]),
        (.structure(signature: 0x05, fields: []), [0xB0, 0x05])
    ]
    
    @Test(arguments: PackStreamValueTests.arguments)
    func encodePackStreamValue(value: PackStreamValue, expecting bytes: [UInt8]) throws {
        var buffer = ByteBuffer()
        try buffer.writePackStream(value)
        #expect(bytes == Array(buffer.readableBytesView))
    }
    
    @Test(arguments: PackStreamValueTests.arguments + [
        (.integer(42), [0x2A]),
        (.integer(42), [0xC8, 0x2A]),
        (.integer(42), [0xC9, 0x00, 0x2A]),
        (.integer(42), [0xC9, 0x00, 0x2A]),
        (.integer(42), [0xCA, 0x00, 0x00, 0x00, 0x2A]),
        (.integer(42), [0xCB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A]),
        (.dictionary(["A": 1, "B": 2, "C": 3, "D": 4, "E": 5, "F": 6, "G": 7, "H": 8, "I": 9, "J": 10, "K": 11, "L": 12, "M": 13, "N": 14, "O": 15, "P": 16, "Q": 17, "R": 18, "S": 19, "T": 20, "U": 21, "V": 22, "W": 23, "X": 24, "Y": 25, "Z": 26]), [0xD8, 0x1A, 0x81, 0x41, 0x01, 0x81, 0x42, 0x02, 0x81, 0x43, 0x03, 0x81, 0x44, 0x04,0x81, 0x45, 0x05, 0x81, 0x46, 0x06, 0x81, 0x47, 0x07, 0x81, 0x48, 0x08, 0x81, 0x49, 0x09, 0x81, 0x4A, 0x0A, 0x81, 0x4B, 0x0B, 0x81, 0x4C, 0x0C, 0x81, 0x4D, 0x0D, 0x81, 0x4E, 0x0E, 0x81, 0x4F, 0x0F, 0x81, 0x50, 0x10, 0x81, 0x51, 0x11, 0x81, 0x52, 0x12, 0x81, 0x53, 0x13, 0x81, 0x54, 0x14, 0x81, 0x55, 0x15, 0x81, 0x56, 0x16, 0x81, 0x57, 0x17, 0x81, 0x58, 0x18, 0x81, 0x59, 0x19, 0x81, 0x5A, 0x1A]),
    ])
    func decodePackStreamValue(result: PackStreamValue, from bytes: [UInt8]) throws {
        var buffer = ByteBuffer(bytes: bytes)
        let value = try buffer.readPackStream()
        #expect(value == result)
    }
    
    @Test(arguments: [
        // Int64
        (PackStreamValue.integer(-9223372036854775808), 9),
        (PackStreamValue.integer(-2147483649), 9),
        (PackStreamValue.integer(+2147483648), 9),
        (PackStreamValue.integer(+9223372036854775807), 9),
        // Int32
        (.integer(-2147483648), 5),
        (.integer(-32769), 5),
        (.integer(+32768), 5),
        (.integer(+2147483647), 5),
        // Int16
        (.integer(-32768), 3),
        (.integer(-129), 3),
        (.integer(+128), 3),
        (.integer(+32767), 3),
        // Int8
        (.integer(-128), 2),
        (.integer(-17), 2),
        // TinyInt
        (.integer(-16), 1),
        (.integer(+127), 1),
    ])
    func optimalRepresentation(value: PackStreamValue, size: Int) throws {
        var buffer = ByteBuffer()
        try buffer.writePackStream(value)
        #expect(size == buffer.readableBytes)
    }
    
}
